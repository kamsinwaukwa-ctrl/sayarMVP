---
description: PRD for Sayar MVP — WhatsApp Checkout Platform
globs:
  alwaysApply: false
---

# Sayar — WhatsApp Checkout Platform (MVP)

**TL;DR:** For WhatsApp-first SMEs (starting with beauty/cosmetics), build a self‑checkout flow that turns inbound WhatsApp chats into paid orders — with **native WhatsApp catalog browsing & cart**, address capture via **WhatsApp Flows** (with inline fallback), **simple discount codes at checkout**, and instant **payment links** — so merchants close sales without manual replies.

---

## Users & Value

- **Primary user / persona:** Owner/manager of a Nigerian beauty brand (e.g., Amari) selling via WhatsApp DMs.
- **Secondary users:** Store staff/ops, Sayar admins (internal).

- **Jobs-to-be-done (JTBD):**
  - When a customer DMs “Hi, price?” on WhatsApp, I want the chat to guide them to browse and pay by themselves, so I don’t lose sales to slow replies.
  - When customers return, I want their saved addresses to speed checkout, so repeat purchases are frictionless.
  - When an order is paid, I want automatic confirmation in the same chat and a clean dashboard view, so fulfillment is straightforward.
  - When a customer has a **discount code**, I want them to apply it easily during checkout so AOV and conversion improve without agent intervention.

---

## Success Metrics

- **Primary Goal:** Prove chat-to-paid conversion works with a real merchant (Amari) and generate pilot demand from other SMEs.
- **Success Criteria (MVP targets):**
  - ≥1 pilot merchant live in **test** mode, switching to prod after Meta onboarding.
  - ≥30 paid orders processed in pilot week (combined), checkout success rate ≥60%.
  - ≥15 additional merchants join waitlist post‑demo (Beauty in the Motherland).
  - Payment confirmation latency (paid → confirmation message) P95 < 20s.
  - **Time-to-first-transaction (TTFT)** after sign-up ≤ 1 day (target).

---

## Scope

| Must‑have (MVP)                                                                 | Nice‑to‑have (Later)                                                   | Explicitly Out (Not now)                        |
|---------------------------------------------------------------------------------|------------------------------------------------------------------------|-------------------------------------------------|
| Customer-initiated chats only (24h window)                                      | Template messages for order updates & re-engagement                    | BSP (solution provider) onboarding              |
| First auto‑reply with 2 buttons: **Browse Catalog** / **Talk to agent**         | Multi‑language content                                                 | Marketing/broadcast templates                   |
| **Native WhatsApp Catalog** via product/multi-product messages                  | Promotions/discount **stacks**, tax rules                              | Separate customer mini‑site                     |
| Cart + “Place order” → **WhatsApp Flow** for delivery details                   | Pickup option, multiple pickup sites                                   | Saved cards / recurring payments                |
| Address capture via **WhatsApp Flows** (choose saved or add new; LGA/area)      | Multiple addresses management UI in-chat                               | Complex shipping rate engines                   |
| **Inline address fallback** when Flow is unavailable: numbered options + quick replies | Multiple processors with smart failover                                | Installments / BNPL                             |
| **Simple coupon code at checkout (one code per order)**                         | Advanced targeting rules (category-only, first‑order only)             | Multiple coupons per order                      |
| Payment link generation (Paystack & Korapay) + payment webhooks                 | Message analytics, funnel reports                                      | Full-fledged CRM                                |
| Webhooks: WhatsApp inbound/status + order + Flow submissions + payment          | Bulk catalog tools, rich analytics                                     | Complex role hierarchies beyond owner/staff     |
| Merchant dashboard v1: Orders, Payments, Products, Customers, **Discounts**     | Admin resend/repair tooling with audit trails                          | Full support desk (later plug Chatwoot)         |
| Sayar admin view: tenants, webhook health, minimal PII                          |                                                                        |                                                 |
| **Atomic stock reservations (15‑min TTL) + post‑payment inventory decrement & Meta Catalog sync** |                                    |                                                 |
| **Observability:** structured logs & minimal metrics                            |                                                                        |                                                 |
| **Rate limiting & backoff; DLQ table; Postgres outbox + APScheduler worker**    |                                                                        |                                                 |
| **Tiny ops panel (pilot): stuck reservations, failed catalog syncs, one‑click release** |                                                                        |                                                 |

- **Definition of Done (MVP):**
  - [ ] Inbound "hi" → bot replies with buttons; **Browse Catalog** sends a **multi‑product** message that opens the native catalog UI inside WhatsApp.
  - [ ] Customer browses → adds to cart → taps **View cart / Place order**; our webhook receives **order** payload (items + qty).
  - [ ] **On order receipt:** atomically **reserve stock** per item (15‑minute TTL). If insufficient available stock, reply with updated availability and stop checkout.
  - [ ] **Address capture:** Prefer **WhatsApp Flow**; **if no saved address** send: “Please share your delivery details” prompt. **If saved addresses exist**, send a numbered list (1/2) + interactive buttons **1**, **2**, **Add new**. If Flow fails/unavailable, collect address inline via text prompts and quick replies.
  - [ ] **Discount step:** After shipping is computed, show order summary (items + shipping + total) and ask **“Do you have a discount code?”** Buttons: **Yes** / **No**. If **Yes**, collect code in Flow **or inline**; validate server‑side; on invalid → prompt **Retry** or **Continue without discount**; on valid → apply discount to totals and show updated summary.
  - [ ] Backend generates **payment link** (Paystack or Korapay) using the final total; discount metadata is included for reconciliation; link is sent in chat.
  - [ ] **On payment success:** decrement **stock**, consume reservations, persist **coupon redemption**, and **sync updated availability/quantity to Meta Catalog**; then send confirmation message.
  - [ ] Merchant dashboard shows real‑time orders/payments; products/customers pages exist (basic CRUD/search); **Discounts page** supports creating/pausing codes.
  - [ ] Railway‑hosted webhook (FastAPI) receives WhatsApp/Flows/payment events with **idempotency**, **signature checks**, **per‑merchant rate limit**, and **exponential backoff** on provider errors.
  - [ ] **Observability:** structured logs and minimal metrics captured; DLQ persisted; outbox worker heartbeating; pilot ops panel available.

---

## Merchant Onboarding (Sign‑up → “Finish your store setup 0/4”)

### 0) Sign‑up (account creation)
**Form**
- Business name (required)
- Owner’s name (required)
- Owner email (required; warn if free domain — allow; prefer business domain)
- Password (local auth) _(Google OAuth later)_
- Business WhatsApp number (E.164; unique per merchant; informational until Meta credentials are added)

**Rules**
- Unique email per user; unique WhatsApp number per merchant.
- After successful sign‑up → redirect to **“Finish your store setup (0/4)”** checklist.

**API**
- `POST /api/v1/auth/register`
- `POST /api/v1/auth/login`

**DB**
- `users(id, merchant_id, name, email, password_hash, role{owner,staff})`
- `merchants(id, name, slug, whatsapp_phone_e164, .....)`

---

### 1) Brand basics
**Form**
- Logo upload (PNG/JPG ≤5MB)
- Description (text)
- Currency (ISO; default NGN)

**API**
- `PATCH /api/v1/merchants/:id/branding {description, currency}`
- `POST /api/v1/merchants/:id/logo` (multipart)

**DB**
- `merchants.logo_url`, `merchants.description`, `merchants.currency`

**Done when** fields saved; checklist shows **1/4**.

---

### 2) Create product catalog (Meta Catalog via SDK/Graph)
**Create/Edit Product**
- Title*, Selling Price (kobo)*, Stock*, Category (supports hierarchy via `>`), Description, Images (square, ≤5MB each), SKU, Search tags.
- _(Future-ready)_ Variant attributes (color/size) — store now, not used in MVP cart.

**Behavior**
- Save to our DB, then upsert to **Commerce Manager** via Business SDK/Graph.
- Use stable **`retailer_id`** = our product UUID/SKU for mapping orders from WhatsApp `order` messages.

**APIs**
- `POST /api/v1/products`
- `PUT /api/v1/products/:id`
- `POST /api/v1/products/:id/images`

**DB**
- `products(id, merchant_id, title, price_kobo, stock, reserved_qty, description, image_url, sku, category_path, tags[], catalog_id, retailer_id, status)`
- _(Optional now)_ `product_attributes`, `product_variants`

**Done when** product is visible in Catalog (Graph call success), checklist shows **2/4**.

---

### 3) Set delivery rates
**UI (modal)**
- Rate Name (e.g., “Lagos Zone A (48hrs)”)
- Areas Covered (multiline; comma/line-separated list: “VI, Lekki Phase 1, Ikoyi…”)
- Delivery Price (kobo)
- Description (optional)

**APIs**
- `POST /api/v1/delivery-rates`
- `GET/PUT/DELETE /api/v1/delivery-rates/:id`

**DB (MVP)**
- `delivery_rates(id, merchant_id, name, areas_text, price_kobo, description, active)`

**Done when** at least one active rate exists; checklist shows **3/4**.

---

### 4) Connect payments (Korapay or Paystack)
**Flow**
- Step 1: Choose provider (Korapay | Paystack)
- Step 2: Enter keys  
  - Korapay: **Public + Secret**  
  - Paystack: **Secret** (+ Public optional)
- Step 3: **Verify connection** button → harmless authenticated call
- Step 4: Save → store **encrypted**; mark provider verified

**APIs**
- `POST /api/v1/payments/providers/verify`
- `POST /api/v1/payments/providers` (save keys)

**DB**
- `merchants.provider_default, paystack_sk_enc, paystack_pk_enc, korapay_sk_enc, korapay_pk_enc, payments_verified_at`

**Done when** provider verified; checklist shows **4/4**.

---

### Integrations (Meta / WhatsApp)
**Page: “Integrations → WhatsApp”**
- Fields: **WABA ID, Phone Number ID, App ID, System User access token** (test → prod)
- Button: **Verify connection** → lightweight Graph API call
- Status badges: Connected (test) / Connected (prod) / Not connected

**APIs**
- `POST /api/v1/integrations/meta/verify`
- `POST /api/v1/integrations/meta/save`

**DB**
- `merchants.waba_id, phone_number_id, meta_app_id, meta_system_user_token` (token encrypted at rest)

---

## Detailed Flows

### A) Customer Flow (in chat)
1) **Customer sends first message** (or clicks CTWA ad).  
2) **Auto‑reply** (buttons):  
   - **Browse Catalog** → send **multi‑product** message referencing the merchant’s Commerce Manager Catalog (opens native catalog UI).  
   - **Talk to agent** → routes to human (manual for MVP).
3) Customer browses → adds to cart → **View cart / Place order** (all within WhatsApp).  
4) Our webhook receives **`messages[].type == "order"`** with `product_items[].product_retailer_id` + `quantity`.  
5) **Inventory reservation:** In a single DB transaction, lock product rows, check `available = stock - reserved_qty`. If sufficient, increment `reserved_qty` and create `inventory_reservations` with **15‑minute TTL**; else reply with updated availability and abort.  
6) **Address capture (Flow-first with inline fallback):**  
   - If **no saved address** for this phone: send message **“Please share your delivery details”** and present Flow button; if Flow fails, collect inline: **Name**, **Phone confirm**, **Address line**, **LGA/Area** using quick replies/text prompts.  
   - If **saved addresses exist**: send message **“Which delivery address would you like to use?”** and list up to **two** addresses as a **numbered list (1, 2)**, then show interactive buttons **[1] [2] [Add new]**. **Add new** launches Flow (or inline fallback if Flow unavailable).  
7) **Discount step (Flow-first with inline fallback):**
   - Show **Order Summary**: items subtotal, shipping, **total**. Ask: **“Do you have a discount code?”** Buttons: **Yes** / **No**.  
   - If **Yes**: open a small Flow screen (or inline prompt) to input `CODE`. Backend **validates** and returns either:  
     - **Valid** → apply discount to cart: show **New Total**; continue to payment.  
     - **Invalid/expired/not-applicable** → message: “That code isn’t valid right now.” Buttons: **Retry** / **Continue without discount**.  
   - If **No**: proceed to payment.
8) Backend creates **Order** (pending), computes shipping from **delivery_rates**, applies discount if present, computes **final total**.  
9) Backend hits **Paystack/Korapay** to create a **payment link** (include `discount_code` and `discount_kobo` in provider `metadata`); bot sends link.  
10) **Payment webhook** → on success: in one transaction, **decrement `stock`**, **reduce `reserved_qty`**, mark reservations **consumed**, write inventory ledger, **record coupon redemption**, and **sync the new quantity/availability to Meta Catalog** (Business SDK/Graph). Then send confirmation message and expose to merchant dashboard.  
11) **Reservation expiry:** APScheduler worker scans for expired holds and releases `reserved_qty` (and syncs catalog if availability changed).

### B) Merchant Flow (dashboard)
- **Onboarding wizard:** 0→4 steps above, then prompt to connect WhatsApp (Integrations page).  
- **Catalog:** Create/edit products → sync to Meta Catalog; keep stable `retailer_id`.  
- **Discounts:** Create/pause coupon codes; set type (percent/fixed), value, expiry, min cart, usage limits; view redemptions.
- **Orders:** List (pending/paid/failed), detail (shows discount if applied), totals/fees.  
- **Customers:** Basic list + saved addresses.  
- **Settings:** Settlement currency, who bears fees, business info.  
- **Staff:** Invite staff (email), assign role = staff (read/write: orders/products/discounts).

### C) Sayar Admin Flow
- **Tenants list** (merchants) + health: last webhook received, error rate.  
- **Orders overview** (aggregated, no card data).  
- **Ops panel (pilot):** stuck reservations, failed catalog syncs; **one‑click reservation release** per order.  
- **Webhook events / Outbox / DLQ** views.

---

## Content Copy (default, editable in dashboard)

> Merchants can edit these in Settings → Messaging. Keep short and compliant with WhatsApp commerce policy.

- **Auto‑reply (first message):**  
  “Hi! 👋 You can browse our catalog and checkout yourself, or chat with a team member.”  
  Buttons: **Browse Catalog** | **Talk to agent**

- **Stock warning (insufficient availability):**  
  “Sorry, some items just sold out. Available now: {{lines}}. Please update your cart and try again.”

- **Address prompt (no saved):**  
  “Please share your delivery details so we can calculate shipping.”  
  Button (Flow): **Enter delivery details**

- **Address selection (saved):**  
  “Which delivery address would you like to use?
1) {{address_1}}
2) {{address_2}}”  
  Buttons: **1**, **2**, **Add new**

- **Discount prompt:**  
  “Your total is ₦{{total}}. Do you have a discount code?”  
  Buttons: **Yes**, **No**

- **Discount invalid:**  
  “That code isn’t valid right now. Want to try again or continue?”  
  Buttons: **Retry**, **Continue**

- **Payment link:**  
  “Checkout securely here 👉 {{payment_url}} (expires soon). We’ll confirm once it’s paid.”

- **Order paid confirmation:**  
  “Paid ✅ Thank you! Order #{{order_code}}. We’ll update you once it’s ready.”

---

## Tech Stack

### Frontend (merchant + admin dashboards)
- **React (Vite + TypeScript)**, **Tailwind CSS**, **React Router + React Query**.
- **Auth:** JWT (owner/staff).

### Backend
- **FastAPI** (Python) — REST API, webhooks, business logic.
- **WhatsApp Cloud API** — send **product/multi-product** messages; receive **messages** (incl. `order`) and **message status**.
- **WhatsApp Flows** — Address & Delivery form; **Discount code** mini-form; **inline fallback** when Flow unavailable.
- **Meta Catalog via Graph API / Business SDK** — create/update items; keep stable `retailer_id` mappings; **update quantity/availability after each sale or release**.
- **Payments:** Paystack & Korapay — payment link only; **HMAC/signature verification** + verify endpoints.
- **Job system:** **Postgres-backed outbox** (`outbox_events`) + **APScheduler** worker for durable, retryable jobs (reservation expiry, catalog sync, WA send retries). **RabbitMQ** optional later when throughput requires a broker.

### Database
- **Supabase (Postgres)** — merchants, products, customers, addresses, delivery_rates, orders, order_items, payments, webhook_events, inventory tables, **discounts**, **coupon_redemptions**, **outbox_events**, **DLQ**.  
- Migrations via Alembic or Supabase SQL.

### Hosting / DevOps
- **Railway** — public FastAPI webhook + API (HTTPS).
- **ngrok** — local testing against WhatsApp/Korapay/Paystack webhooks.
- GitHub Actions — CI (lint, type check, tests).

---

## Data Model (v1 tables; Supabase/Postgres; **UUIDs everywhere**)

> All tables include: `id uuid primary key default gen_random_uuid(), created_at timestamptz default now(), updated_at timestamptz default now()` (+ trigger to keep `updated_at` fresh).  
> All money fields are **integers in kobo**.

- **merchants**(id, name, slug, whatsapp_phone_e164, waba_id, phone_number_id, meta_app_id, meta_system_user_token_enc, provider_default, paystack_sk_enc, paystack_pk_enc, korapay_sk_enc, korapay_pk_enc, settlement_currency, fee_bearer, payments_verified_at, created_at, updated_at)

- **users**(id, merchant_id, name, email, password_hash, role[owner|staff], created_at, updated_at)

- **products**(id, merchant_id, title, description, **price_kobo**, stock, reserved_qty DEFAULT 0, image_url, sku, status, catalog_id, retailer_id, category_path, tags TEXT[], created_at, updated_at)  
  **Constraints:** `CHECK (stock >= 0 AND reserved_qty >= 0 AND reserved_qty <= stock)`, `UNIQUE (merchant_id, sku)`, `UNIQUE (merchant_id, retailer_id)`  
  **Generated:** `available_qty int generated always as (greatest(stock - reserved_qty, 0)) stored`

- **customers**(id, merchant_id, phone_e164, name, created_at, updated_at)  
  **Unique:** `(merchant_id, phone_e164)`

- **addresses**(id, customer_id, label, line1, lga, city, state, country, is_default, created_at, updated_at)  
  **Partial unique:** `UNIQUE (customer_id) WHERE is_default`

- **delivery_rates**(id, merchant_id, name, areas_text, **price_kobo**, description, active, created_at, updated_at)

- **orders**(id, merchant_id, customer_id, **subtotal_kobo**, **shipping_kobo**, **discount_kobo DEFAULT 0**, **total_kobo**, status[pending|paid|failed|cancelled], payment_provider, provider_reference, order_code TEXT UNIQUE, paid_at, created_at, updated_at)  
  **Check:** `total_kobo = subtotal_kobo + shipping_kobo - discount_kobo`  
  **Unique:** `(payment_provider, provider_reference)`

- **order_items**(id, order_id, product_id, qty, **unit_price_kobo**, **total_kobo**, created_at, updated_at)  
  **Check:** `qty > 0`

- **payments**(id, order_id, provider, reference, status, **amount_kobo**, **fee_kobo**, currency, raw JSONB, created_at, updated_at)  
  **Unique:** `(provider, reference)`; `CHECK (amount_kobo >= 0)`

- **webhook_events**(id, source[wa|paystack|korapay|flows], event_key UNIQUE, status, raw JSONB, received_at, processed_at)

- **inventory_reservations**(id, order_id, product_id, qty, expires_at, status[active|consumed|released], created_at, updated_at)  
  **Unique:** `(order_id, product_id)`; **Index:** `(status, expires_at) WHERE status='active'`

- **inventory_ledger**(id, product_id, delta, reason[sale|release|manual], ref_id, created_at)

- **discounts**(id, merchant_id, code TEXT, type[percent|fixed], **value_bp INT**, **amount_kobo BIGINT**, **max_discount_kobo BIGINT**, **min_subtotal_kobo BIGINT**, starts_at, expires_at, usage_limit_total INT, usage_limit_per_customer INT, times_redeemed INT DEFAULT 0, status[active|paused|expired] DEFAULT 'active', stackable BOOLEAN DEFAULT FALSE, created_at, updated_at)  
  **Notes:** For `type='percent'`, use `value_bp` (basis points, e.g., 1500 = 15%). For `type='fixed'`, use `amount_kobo`. Cap with `max_discount_kobo` (optional).  
  **Unique:** `(merchant_id, code)`

- **coupon_redemptions**(id, discount_id, order_id, customer_id, **discount_kobo**, redeemed_at)  
  **Index:** `(discount_id)`, `(customer_id, redeemed_at DESC)`

- **dlq_events**(id, source, key, reason, payload JSONB, created_at)

- **outbox_events**(id, merchant_id, job_type TEXT CHECK (job_type IN ('wa_send','catalog_sync','release_reservation','payment_followup')), payload JSONB, status TEXT CHECK (status IN ('pending','processing','done','error')) DEFAULT 'pending', attempts INT DEFAULT 0, max_attempts INT DEFAULT 8, next_run_at TIMESTAMPTZ DEFAULT now(), last_error TEXT, created_at, updated_at)  
  **Indexes:** `(status, next_run_at) WHERE status='pending'`, `(merchant_id, status)`  
  **Note:** Worker uses `FOR UPDATE SKIP LOCKED`; on failure set exponential backoff; after `max_attempts` copy to `dlq_events`.

**Foreign keys & deletes (sensible defaults):**  
- `users.merchant_id → merchants(id) ON DELETE CASCADE`  
- `products.merchant_id → merchants(id) ON DELETE CASCADE`  
- `customers.merchant_id → merchants(id) ON DELETE CASCADE`  
- `addresses.customer_id → customers(id) ON DELETE CASCADE`  
- `orders.merchant_id → merchants(id) ON DELETE CASCADE`  
- `orders.customer_id → customers(id) SET NULL`  
- `order_items.order_id → orders(id) ON DELETE CASCADE`  
- `order_items.product_id → products(id) RESTRICT`  
- `payments.order_id → orders(id) ON DELETE CASCADE`  
- `inventory_reservations.order_id → orders(id) ON DELETE CASCADE`  
- `inventory_reservations.product_id → products(id) RESTRICT`  
- `inventory_ledger.product_id → products(id) RESTRICT`  
- `discounts.merchant_id → merchants(id) ON DELETE CASCADE`  
- `coupon_redemptions.discount_id → discounts(id) ON DELETE CASCADE`  
- `coupon_redemptions.order_id → orders(id) ON DELETE CASCADE`  
- `coupon_redemptions.customer_id → customers(id) ON DELETE SET NULL`

**RLS:** ON for all tenant tables; gate by `merchant_id` (and `customer_id` path where relevant).

---

## APIs (new for Discounts)

- **Merchant CRUD**  
  - `POST /api/v1/discounts` (create)  
  - `GET /api/v1/discounts` (list)  
  - `PATCH /api/v1/discounts/:id` (pause/resume/edit)  
  - `GET /api/v1/discounts/:id/redemptions`

- **Validation & Apply (checkout)**  
  - `POST /api/v1/discounts/validate` → body: `{merchant_id, customer_id?, code, subtotal_kobo, items:[{product_id, qty}]}` → returns `{valid, discount_kobo, reason?}`  
  - `POST /api/v1/orders/:id/apply-discount` → applies a previously validated code atomically; recalculates totals; emits `coupon_redemptions` on **payment success**.

**Validation rules (MVP):** code active, time window ok, usage limits not exceeded (total and per-customer), meets `min_subtotal_kobo`. One coupon per order, non‑stackable.

---

## Observability & Reliability (MVP)

### Structured Logs (every step)
Include: `merchant_id`, `order_id`, `wa_message_id`, `payment_reference`, `event_type`.  
Transitions include: `order_received`, `reserved_ok/insufficient`, `flow_started/failed`, `address_saved`, `discount_validate_ok/invalid`, `discount_applied`, `payment_link_sent`, `payment_webhook_ok`, `stock_decremented`, `coupon_redeemed`, `catalog_synced`, `outbox_job_start/outbox_job_end`.

### Minimal Metrics
- Counters: `reservations_created`, `reservations_expired`, `discounts_validated`, `discounts_applied`, `discounts_invalid`, `catalog_sync_success`, `catalog_sync_failed`, `webhook_errors`, `outbox_jobs_processed`.
- Histograms: `payment_confirmation_latency_seconds` (P50/P95/P99).

### Rate Limiting & Backoff
- Per‑merchant outbound WA send cap (e.g., 1 msg/sec burst 3).  
- Exponential backoff with jitter for Meta/Paystack/Kora errors.  
- Persist failed events to **dlq_events** for ops review.

### Worker Heartbeats & Backlog
- Heartbeat every 30s with `claimed_jobs`, `done_jobs`, `backlog_size`.
- Metric: **outbox_backlog_size** (pending where `next_run_at <= now()`), alert if > **100** for > **2 min** per merchant.

### Tiny Ops Panel (pilot)
- Tables of **stuck reservations**, **failed catalog syncs**, **outbox backlog**, and **discounts** with quick pause/resume.

---

## Operational SLOs / Error Budgets

- WhatsApp→Order webhook processing success ≥ 99.5% (day).  
- Payment confirmation P95 < 20s; P99 < 60s.  
- Duplicate-event ingestion creates **0** duplicate orders (idempotency enforced).  
- Reservation expiry job success ≥ 99% daily; Catalog sync retry queue drained within 5 minutes.  
- **Outbox drain SLO:** median wait time **< 30s**, P95 **< 120s** during pilot traffic; no merchant backlog > **100** pending jobs for > **5 minutes**.

---

## Acceptance Criteria (testable)

1. **Inbound chat** → Auto‑reply with buttons; **Browse Catalog** sends a multi‑product message that opens catalog inside WhatsApp.
2. **Cart → Place order** produces an **order** event to our webhook containing item `retailer_id`s and quantities.
3. **Reservation step** holds stock with 15‑minute TTL; if stock insufficient, customer is told updated availability and checkout halts.
4. **Address capture**: Flow-first; if no saved, prompt user to provide details; if saved, show numbered list with buttons **1 / 2 / Add new**; inline fallback works when Flow is unavailable.
5. **Discount flow**: discount prompt shown after totals; valid code applies correct `discount_kobo`; invalid code shows retry/continue; only one code per order; totals recompute correctly.
6. **Payment link** (Paystack/Korapay) is generated and sent in chat; payment webhook updates the order to **paid**; confirmation message is sent.
7. **Inventory update on paid**: for each item, `stock` is decremented, `reserved_qty` reduced, ledger written, and **Meta Catalog** quantity/availability is updated.
8. **Coupon redemption** recorded only on paid orders; usage limits enforced; subsequent attempts exceed limits → validation fails.
9. **Concurrency test**: two buyers attempt to purchase the last unit → only one reaches payment; no double‑sale; no refund needed.
10. **Onboarding wizard** shows 0→4; each step verifies and advances; WhatsApp integration test call passes.
11. **Observability**: structured logs present; metrics recorded; ops panel lists stuck reservations & failed catalog syncs.
12. **Idempotency & security:** duplicate webhooks do not create duplicate orders; webhook signatures are verified.
13. **Outbox durability test:** kill the worker mid-flight; pending jobs remain in `outbox_events` and are picked up on restart.
14. **Retry/backoff test:** transient Meta Catalog error retries via outbox until success; on repeated failure payload lands in `dlq_events`.

---

## Chatwoot Integration (Post-MVP)

### Overview
Self-hosted Chatwoot integration for advanced customer support capabilities, enabling merchants to provide human agent support alongside the automated WhatsApp checkout flow.

### Integration Requirements

#### Self-Hosted Deployment (GCP)
- **Platform**: Google Cloud Platform (GCP) Compute Engine
- **Architecture**: Single VM deployment with Docker containers
- **Database**: PostgreSQL (separate from main Sayar database)
- **Storage**: Google Cloud Storage for file attachments
- **Domain**: Custom domain with SSL certificate

#### Environment Configuration
```bash
# Core Chatwoot Configuration
FRONTEND_URL=https://support.sayar.com
RAILS_ENV=production
SECRET_KEY_BASE=<secure-secret-key>

# Database Configuration
DATABASE_URL=postgresql://user:password@host:5432/chatwoot_production

# Storage Configuration (GCS)
ACTIVE_STORAGE_SERVICE=google
GCS_PROJECT=<gcp-project-id>
GCS_CREDENTIALS=<service-account-json>
GCS_BUCKET=chatwoot-attachments

# WhatsApp Integration
WHATSAPP_APP_ID=<facebook-app-id>
WHATSAPP_CONFIGURATION_ID=<meta-configuration-id>
WHATSAPP_APP_SECRET=<facebook-app-secret>

# Email Configuration
SMTP_ADDRESS=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=<email>
SMTP_PASSWORD=<app-password>
SMTP_AUTHENTICATION=plain
SMTP_ENABLE_STARTTLS_AUTO=true
```
#### Required Facebook App Permissions
- `whatsapp_business_management`: Manages WhatsApp business assets
- `whatsapp_business_messaging`: Enables sending and receiving WhatsApp messages
- `business_management`: Manages business assets

#### Deployment Steps
1. **GCP VM Setup**
   - Create Compute Engine instance (Ubuntu 22.04 LTS)
   - Configure firewall rules (HTTP: 80, HTTPS: 443, SSH: 22)
   - Install Docker and Docker Compose
2. **Chatwoot Installation**
   ```bash
   # Download and execute installation script
   wget https://get.chatwoot.app/linux/install.sh
   chmod +x install.sh
   ./install.sh --install
   ```
3. **Domain & SSL Configuration**
   - Configure DNS A record pointing to GCP VM IP
   - Obtain SSL certificate using Let's Encrypt
   - Configure Nginx reverse proxy
4. **WhatsApp Channel Setup**
   - Navigate to Settings → Inboxes → Add Inbox
   - Select WhatsApp → WhatsApp Cloud
   - Connect with WhatsApp Business account
   - Configure webhook URL: `https://support.sayar.com/webhooks/whatsapp`

#### Integration with Sayar
- **API Integration**: Use Chatwoot Platform APIs for conversation management
- **Webhook Handling**: Forward WhatsApp messages to appropriate channel
- **Agent Assignment**: Route conversations based on merchant/order context
- **Conversation Continuity**: Maintain context between automated flow and human support

#### Features Enabled
- **Multi-channel Support**: WhatsApp, Email, Website widget
- **Agent Dashboard**: Real-time conversation management
- **Message Templates**: Pre-defined responses for common queries
- **File Sharing**: Image and document support
- **Conversation History**: Complete chat history and context
- **Team Management**: Multiple agents with role-based access
- **Analytics**: Conversation metrics and agent performance

#### Technical Considerations
- **Message Routing**: Intelligent routing based on customer intent
- **Context Preservation**: Maintain order/customer context across channels
- **Escalation Logic**: Automatic escalation from bot to human agents
- **Integration APIs**: RESTful APIs for conversation management
- **Webhook Security**: Signature verification for incoming messages

#### Monitoring & Maintenance
- **Health Checks**: Regular monitoring of Chatwoot services
- **Backup Strategy**: Database and file storage backups
- **Updates**: Regular Chatwoot version updates
- **Performance**: Monitor response times and resource usage

---

## Low-Stock Alerts (Scaffold — Post-MVP, disabled by default)

> **Not part of MVP.** We’re only laying minimal hooks now so we can add alerts quickly later without rework.

- **Feature flag:** `ops.low_stock_alerts_enabled` (**default false**).  
- **DB hooks (optional, not required for MVP):**
  - `products.low_stock_threshold INT NULL` (per‑product override; nullable = disabled).
  - `merchants.alert_channels JSONB` (e.g., `{ "email": ["owner@brand.com"], "wa": [] }`) — **not used** in MVP.
- **Outbox job type (scaffold only):** `low_stock_notify` (created/queued only when feature flag is enabled in future).  
- **Worker scan (future):** evaluate `available_qty <= low_stock_threshold` → enqueue `low_stock_notify`.  
- **API (future, behind flag):**
  - `PATCH /api/v1/products/:id/low-stock` → set/unset threshold.
  - `POST /api/v1/alerts/low-stock/test` → dry‑run.
- **UI (future):** Settings → Notifications (hidden until flag is on).  
- **Observability placeholder:** metric `low_stock_candidates_total` (no alerts emitted in MVP).

> For pilot, merchants can monitor low inventory via the dashboard Products table (`available_qty` column). No automated emails/WA alerts until this feature is intentionally enabled post‑MVP.

---

## Out of Scope (MVP)
- Discount **stacks**, product/category scoping, referral/affiliate codes, automatic tiered discounts (post‑MVP).  
- Marketing templates, abandoned-cart messages, taxes, pickup.  
- Multi‑tenant complex RBAC; full helpdesk; advanced analytics.
- **Low‑stock notifications** (alerts) — **scaffold only**, no alerts in MVP.

---

## Go‑Live Checklist (Pilot: Amari)

- [ ] Merchant credentials added (WABA ID, Phone Number ID, App ID, System User token).  
- [ ] Payment provider keys (Paystack or Korapay) + provider webhook set to our Railway URL.  
- [ ] Delivery rates configured.  
- [ ] Catalog seeded via SDK and visible in WhatsApp catalog (stable `retailer_id`s).  
- [ ] Reservation worker deployed; Catalog sync on paid verified in logs.  
- [ ] Outbox worker (APScheduler) running with heartbeat; backlog graphs visible.  
- [ ] WhatsApp Address Flow + **Discount mini-flow** published; inline fallbacks tested.  
- [ ] End‑to‑end: chat → catalog → cart → place order → reservation → address → **discount (optional)** → payment → **stock decremented & catalog updated** → confirmation.
